{"version":3,"sources":["logo.svg","firebase.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","StarsDisplay","props","react_default","a","createElement","Fragment","utils","range","count","map","starId","key","className","PlayNumber","style","backgroundColor","colors","status","onClick","number","react_keyboard_event_handler_default","handleKeys","onKeyEvent","e","PlayAgain","color","gameStatus","Game","_useGameState","_useState","useState","random","_useState2","Object","slicedToArray","stars","setStars","_useState3","_useState4","availableNums","setAvailableNums","_useState5","_useState6","candidateNums","setCandidateNums","_useState7","_useState8","username","setUsername","_useState9","_useState10","secondsLeft","setSecondsLeft","_useState11","_useState12","toggle","setToggle","_useState13","_useState14","theSplice","setTheSplice","useEffect","length","timerId","setTimeout","roundedNum","Math","round","clearTimeout","secondsRef","database","ref","secondsObj","seconds","topObj","User","once","then","snapshot","data","val","set","result","keys","forEach","push","i","console","log","splice","setGameState","newCandidateNums","sum","newAvailableNums","filter","n","includes","randomSumIn","useGameState","_useState15","_useState16","bestTime","setBestTime","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","concat","cn","App_PlayAgain","startNewGame","App_StarsDisplay","App_PlayNumber","TheStart","_useState17","_useState18","onChange","target","value","onKeyUp","keyCode","updateUsername","TheLeaderboard","StarMatch","setGameId","gameId","_useState19","_useState20","_useState21","_useState22","_useState23","_useState24","_useState25","_useState26","top10","setTop10","_useState27","_useState28","display","setDisplay","top10Ref","App_TheStart","theUsername","c","App_TheLeaderboard","App_Game","available","used","wrong","candidate","arr","reduce","acc","curr","min","max","Array","from","_","floor","sets","sums","j","len","candidateSet","candidateSum","Boolean","window","location","hostname","match","ReactDOM","render","App_StarMatch","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf3c3c26.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import firebase from \"firebase\";\r\n\r\nconst config = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;\r\n","import React, { useState, useEffect } from \"react\";\nimport KeyboardEventHandler from \"react-keyboard-event-handler\";\nimport firebase from \"./firebase.js\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\n// STAR MATCH - V4\n\nconst StarsDisplay = props => (\n  <>\n    {utils.range(1, props.count).map(starId => (\n      <div key={starId} className=\"star\" />\n    ))}\n  </>\n);\n\nconst PlayNumber = props => (\n  <>\n    <button\n      className=\"number\"\n      style={{ backgroundColor: colors[props.status] }}\n      onClick={() => props.onClick(props.number, props.status)}\n    >\n      {props.number}\n    </button>\n\n    <KeyboardEventHandler\n      handleKeys={[props.number + \"\"]}\n      onKeyEvent={(key, e) => props.onClick(props.number, props.status)}\n    />\n  </>\n);\n\nconst PlayAgain = props => (\n  <div className=\"game-done\">\n    <div\n      className=\"message\"\n      style={{ color: props.gameStatus == \"lost\" ? \"red\" : \"green\" }}\n    >\n      {props.gameStatus == \"lost\" ? \"Game Over\" : \"Nice\"}\n    </div>\n    <button onClick={props.onClick}>Play Again</button>\n  </div>\n);\n\nconst useGameState = () => {\n  const [stars, setStars] = useState(utils.random(1, 9));\n  const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\n  const [candidateNums, setCandidateNums] = useState([]);\n\n  const [username, setUsername] = useState(\"\");\n\n  const [secondsLeft, setSecondsLeft] = useState(10.01);\n\n  const [toggle, setToggle] = useState(false);\n  const [theSplice, setTheSplice] = useState(0);\n\n  useEffect(() => {\n    if (secondsLeft > 0 && availableNums.length > 0) {\n      const timerId = setTimeout(() => {\n        const roundedNum = secondsLeft - 0.01;\n        setSecondsLeft(Math.round(100 * roundedNum) / 100);\n      }, 10);\n      return () => clearTimeout(timerId);\n    } else {\n      const secondsRef = firebase.database().ref(\"users/\" + username + \"/\");\n\n      var secondsObj = {\n        seconds: secondsLeft\n      };\n      var topObj = {\n        User: username,\n        seconds: secondsLeft\n      };\n\n      secondsRef.once(\"value\").then(function(snapshot) {\n        var data = snapshot.val();\n        if (data == null) {\n          secondsRef.set(secondsObj);\n        } else if (data.seconds < secondsLeft) {\n          secondsRef.set(secondsObj);\n        }\n      });\n\n      const top10Ref = firebase.database().ref(\"Top10/\");\n\n      top10Ref.once(\"value\").then(function(snapshot) {\n        var data = snapshot.val();\n\n        var result = [];\n        var keys = Object.keys(data);\n        keys.forEach(function(key) {\n          result.push(data[key]);\n        });\n\n        for (var i = 0; i < 10; i++) {\n          console.log(result[i]);\n          if (result[i].seconds < secondsLeft) {\n            if (toggle === false) {\n              setTheSplice(i);\n              setToggle(true);\n            }\n          }\n        }\n        if (toggle) {\n          result.splice(theSplice, 0, topObj);\n        }\n\n        for (var i = 0; i < 10; i++) {\n          const top10Children = firebase.database().ref(\"Top10/Top\" + i);\n          top10Children.set(result[i]);\n        }\n      });\n\n      // }\n    }\n  });\n\n  const setGameState = (newCandidateNums, username) => {\n    setUsername(username);\n\n    if (utils.sum(newCandidateNums) !== stars) {\n      setCandidateNums(newCandidateNums);\n    } else {\n      const newAvailableNums = availableNums.filter(\n        n => !newCandidateNums.includes(n)\n      );\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidateNums([]);\n    }\n  };\n\n  return { stars, availableNums, candidateNums, secondsLeft, setGameState };\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst Game = props => {\n  const {\n    stars,\n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState\n  } = useGameState();\n\n  const [bestTime, setBestTime] = useState(0);\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\n  const gameStatus =\n    availableNums.length == 0 ? \"won\" : secondsLeft === 0 ? \"lost\" : \"active\";\n\n  const secondsRef = firebase.database().ref(\"users/\" + props.username + \"/\");\n\n  secondsRef.once(\"value\").then(function(snapshot) {\n    var data = snapshot.val();\n    if (data != null) {\n      setBestTime(data.seconds);\n    }\n  });\n\n  const numberStatus = number => {\n    if (!availableNums.includes(number)) {\n      return \"used\";\n    }\n    if (candidateNums.includes(number)) {\n      return candidatesAreWrong ? \"wrong\" : \"candidate\";\n    }\n    return \"available\";\n  };\n\n  const onNumberClick = (number, currentStatus) => {\n    if (gameStatus !== \"active\" || currentStatus == \"used\") {\n      return;\n    }\n    const newCandidateNums =\n      currentStatus === \"available\"\n        ? candidateNums.concat(number)\n        : candidateNums.filter(cn => cn !== number);\n\n    setGameState(newCandidateNums, props.username);\n  };\n\n  return (\n    <div className=\"game\">\n      <div className=\"help\">\n        Pick 1 or more numbers that sum to the number of stars\n      </div>\n      <div>\n        {props.username} your best time is {bestTime}\n      </div>\n      <div className=\"body\">\n        <div className=\"left\">\n          {gameStatus !== \"active\" ? (\n            <PlayAgain onClick={props.startNewGame} gameStatus={gameStatus} />\n          ) : (\n            <StarsDisplay count={stars} />\n          )}\n        </div>\n        <div className=\"right\">\n          {utils.range(1, 9).map(number => (\n            <PlayNumber\n              key={number}\n              status={numberStatus(number)}\n              number={number}\n              onClick={onNumberClick}\n            />\n          ))}\n        </div>\n      </div>\n      <div className=\"timer\">Time Remaining: {secondsLeft}</div>\n      <KeyboardEventHandler\n        handleKeys={[\"enter\"]}\n        onKeyEvent={(key, e) => props.startNewGame()}\n      />\n    </div>\n  );\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst TheStart = props => {\n  const [username, setUsername] = useState(\"\");\n\n  const updateUsername = e => {\n    setUsername(e.target.value);\n  };\n\n  const doSubmit = e => {\n    if (e.keyCode === 13) {\n      props.updateUsername(username);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"center\">\n        <div className=\"row\">\n          <div className=\"col-lg-4\">&nbsp;</div>\n          <div className=\"col-lg-4 code center\">\n            <div className=\"largerText\">\n              Enter A Name And Press Enter To Start\n            </div>\n            <input\n              className=\"width100\"\n              onChange={updateUsername}\n              onKeyUp={doSubmit}\n            />\n          </div>\n          <div className=\"col-lg-4\">&nbsp;</div>\n        </div>\n      </div>\n      <KeyboardEventHandler\n        handleKeys={[\"enter\"]}\n        // onKeyEvent={(key, e) => props.startNewGame()}\n        onKeyEvent={(key, e) => props.updateUsername(username)}\n      />\n    </>\n  );\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst TheLeaderboard = props => {\n  return (\n    <>\n      {\n        <>\n          <div className=\"cell\">\n            <div className=\"floatLeft\">{props.username}</div>\n            <div className=\"floatRight\">{props.seconds}</div>\n          </div>\n          <br />\n        </>\n      }\n    </>\n  );\n};\n\nconst StarMatch = () => {\n  const updateUsername = theUsername => {\n    console.log(username);\n    setUsername(theUsername);\n    startNewGame();\n  };\n\n  const startNewGame = () => {\n    if (toggle === 0) {\n      setToggle(toggle + 1);\n    }\n    setGameId(gameId + 1);\n  };\n\n  // var request = new XMLHttpRequest()\n\n  // var test = {\n  //   \"jsonrpc\": \"2.0\",\n  //   \"method\": \"generateIntegerSequences\",\n  //   \"params\": {\n  //       \"apiKey\": \"0a76050f-bcf7-49e2-a234-d2b232f9c15f\",\n  //       \"n\": 2,\n  //       \"length\": [5, 1],\n  //       \"min\": [1, 1],\n  //       \"max\": [69, 26],\n  //       \"replacement\": [false, false],\n  //       \"base\": [10, 10]\n  //   },\n  //   \"id\": 45673\n  // }\n\n  // request.open('POST', \"https://api.random.org/json-rpc/2/invoke\", true)\n\n  // request.onload = function () {\n  //   console.log(this.response);\n  //   var data = JSON.parse(this.response)\n  //   // console.log(\"true\"+data)\n\n  //   }\n\n  // request.send()\n\n  const [gameId, setGameId] = useState(1);\n  const [toggle, setToggle] = useState(0);\n  const [username, setUsername] = useState(\"\");\n  const [top10, setTop10] = useState([]);\n  const [display, setDisplay] = useState(false);\n\n  const top10Ref = firebase.database().ref(\"Top10/\");\n\n  if (display != true) {\n    top10Ref.once(\"value\").then(function(snapshot) {\n      var data = snapshot.val();\n      var result = [];\n      var keys = Object.keys(data);\n      keys.forEach(function(key) {\n        result.push(data[key]);\n      });\n      setTop10(result);\n      setDisplay(true);\n    });\n  }\n\n  console.log(Math.random + \"\" + top10);\n\n  if (toggle === 0) {\n    return (\n      <>\n        <TheStart updateUsername={updateUsername} />\n\n        <div className=\"wrap paddingTop\">\n          <div className=\"content mediumText\">\n            <h3>The Leaderboard</h3>\n            {display == true\n              ? top10.map(c => (\n                  <TheLeaderboard\n                    key={c.User}\n                    username={c.User}\n                    seconds={c.seconds}\n                  />\n                ))\n              : \"\"}\n          </div>\n        </div>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <Game\n          key={gameId}\n          startNewGame={startNewGame}\n          toggle={toggle}\n          username={username}\n        />\n      </>\n    );\n  }\n};\n\n// Color Theme\nconst colors = {\n  available: \"lightgray\",\n  used: \"lightgreen\",\n  wrong: \"lightcoral\",\n  candidate: \"deepskyblue\"\n};\n\n// Math science\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\n\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(max * Math.random()),\n\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n    return sums[utils.random(0, sums.length)];\n  }\n};\n\nexport default function App() {\n  return <StarMatch />;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}