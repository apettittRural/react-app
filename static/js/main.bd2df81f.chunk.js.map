{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","StarsDisplay","props","react_default","a","createElement","Fragment","utils","range","count","map","starId","key","className","PlayNumber","style","backgroundColor","colors","status","onClick","number","onKeyDown","onDown","PlayAgain","color","gameStatus","Game","_useGameState","_useState","useState","random","_useState2","Object","slicedToArray","stars","setStars","_useState3","_useState4","availableNums","setAvailableNums","_useState5","_useState6","candidateNums","setCandidateNums","_useState7","_useState8","secondsLeft","setSecondsLeft","useEffect","length","timerId","setTimeout","roundedNum","Math","round","clearTimeout","setGameState","newCandidateNums","sum","newAvailableNums","filter","n","includes","randomSumIn","useGameState","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","concat","cn","console","log","App_PlayAgain","startNewGame","App_StarsDisplay","App_PlayNumber","StarMatch","_useState9","_useState10","gameId","setGameId","App_Game","available","used","wrong","candidate","arr","reduce","acc","curr","min","max","Array","from","_","i","floor","sets","sums","j","len","candidateSet","candidateSum","push","Boolean","window","location","hostname","match","ReactDOM","render","App_StarMatch","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd2df81f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// STAR MATCH - V4\n\nconst StarsDisplay = props => (\n\t<>\n    {utils.range(1, props.count).map(starId =>\n      <div key={starId} className=\"star\" />\n    )}\n  </>\n);\n\nconst PlayNumber = props => (\n\t<button \n  \tclassName=\"number\"\n    style={{ backgroundColor: colors[props.status] }}\n    onClick={() => props.onClick(props.number, props.status)}\n    onKeyDown={() => props.onDown(props.number, props.status)}\n  >\n    {props.number}\n  </button>\n);\n\nconst PlayAgain = props => (\n  <div className ='game-done'>\n    <div className=\"message\" style ={{color: props.gameStatus == 'lost' ? 'red' : 'green'}}>\n      {props.gameStatus == 'lost' ? 'Game Over' : 'Nice'}\n    </div>\n    <button onClick={props.onClick}>Play Again</button>\n  </div>\n)\n\nconst useGameState = () => {\n  \tconst [stars, setStars] = useState(utils.random(1, 9));\n  const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\n  const [candidateNums, setCandidateNums] = useState([]);\n  const [secondsLeft, setSecondsLeft] = useState(10);\n  \n  useEffect(() => {\n    if(secondsLeft > 0 && availableNums.length > 0){\n    const timerId = setTimeout(() => {\n      const roundedNum = secondsLeft - .01;\n      setSecondsLeft(Math.round(100*roundedNum)/100);\n    }, 10)\n    return () => clearTimeout(timerId)\n  }\n  });\n  \n  const setGameState = (newCandidateNums) => {\n      if(utils.sum(newCandidateNums) !== stars){\n      setCandidateNums(newCandidateNums);\n    }\n    else{\n      const newAvailableNums = availableNums.filter(\n        n => !newCandidateNums.includes(n)\n      );\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidateNums([])\n    }\n  }\n  \n  return{stars, availableNums, candidateNums, secondsLeft, setGameState}\n};\n\nconst Game = (props) => {\n\n  const{\n    stars,\n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState,\n  }\n   = useGameState();\n  \n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\n  const gameStatus = availableNums.length == 0 ? 'won' : secondsLeft === 0 ? 'lost' : 'active'\n  \n\n  \n  const numberStatus = (number) => {\n  \tif (!availableNums.includes(number)) {\n    \treturn 'used';\n    }\n    if (candidateNums.includes(number)) {\n    \treturn candidatesAreWrong ? 'wrong': 'candidate';\n    }\n    return 'available';\n  };\n  \n  \n  const onNumberClick = (number, currentStatus) => {\n    if(gameStatus !== 'active' || currentStatus == 'used'){\n      return;\n    }\n    const newCandidateNums = \n          currentStatus === 'available'\n          ? candidateNums.concat(number)\n          :candidateNums.filter(cn => cn !== number);\n    \n  setGameState(newCandidateNums);\n  }\n\n  const onKeyDown = (number, currentStatus) => {\n    console.log(number+\" \"+currentStatus);\n  //   if(gameStatus !== 'active' || currentStatus == 'used'){\n  //     return;\n  //   }\n  //   const newCandidateNums = \n  //         currentStatus === 'available'\n  //         ? candidateNums.concat(number)\n  //         :candidateNums.filter(cn => cn !== number);\n    \n  // setGameState(newCandidateNums);\n  }\n  \n  \n  return (\n    <div className=\"game\">\n      <div className=\"help\">\n        Pick 1 or more numbers that sum to the number of stars\n      </div>\n      <div className=\"body\">\n        <div className=\"left\">\n          {gameStatus !== 'active' ? \n            (<PlayAgain onClick={props.startNewGame} gameStatus={gameStatus}/>) \n          : (<StarsDisplay count={stars}/>)}\n        </div>\n        <div className=\"right\">\n        \t{utils.range(1, 9).map(number =>\n          \t<PlayNumber \n            \tkey={number} \n              status={numberStatus(number)}\n              number={number}\n              onClick = {onNumberClick}\n              onDown = {onKeyDown}\n            />\n          )}\n        </div>\n      </div>\n      <div className=\"timer\">Time Remaining: {secondsLeft}</div>\n    </div>\n  );\n};\n\nconst StarMatch = () => {\n  const [gameId, setGameId] = useState(1);\n  return <Game key={gameId} startNewGame={() => setGameId(gameId + 1)} />\n}\n\n// Color Theme\nconst colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue',\n};\n\n// Math science\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\n\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(max * Math.random()),\n\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n    return sums[utils.random(0, sums.length)];\n  },\n};\n\n\nexport default function App() {\n  return (\n    <StarMatch />\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}